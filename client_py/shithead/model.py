# generated by datamodel-codegen:
#   filename:  request-schema.json
#   timestamp: 2023-03-04T13:32:53+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field


class Requests(BaseModel):
    __root__: Any = Field(..., title="Requests")


class TakePlayPileRequest(BaseModel):
    player_id: int = Field(..., title="Player Id")
    type: Optional[str] = Field(default="take_play_pile", title="Type")


class HiddenCardRequest(BaseModel):
    player_id: int = Field(..., title="Player Id")
    type: Optional[str] = Field(default="hidden_card", title="Type")


class CardModel(BaseModel):
    rank: int = Field(..., title="Rank")
    suit: int = Field(..., title="Suit")


class ChoosePublicCardsRequest(BaseModel):
    player_id: int = Field(..., title="Player Id")
    type: Optional[str] = Field(default="choose_public_cards", title="Type")
    cards: List[CardModel] = Field(..., title="Cards")


class PrivateCardsRequest(BaseModel):
    player_id: int = Field(..., title="Player Id")
    type: Optional[str] = Field(default="private_cards", title="Type")
    cards: List[CardModel] = Field(..., title="Cards")
    choice: Optional[str] = Field(default="", title="Choice")


class PlayerPublicInfo(BaseModel):
    id: int = Field(..., title="Id")
    public_cards: List[CardModel] = Field(..., title="Public Cards")
    nbr_hidden_cards: int = Field(..., title="Nbr Hidden Cards")
    nbr_private_cards: int = Field(..., title="Nbr Private Cards")


class PublicInfoData(BaseModel):
    type: Optional[str] = Field(default="public_info", title="Type")
    game_id: int = Field(..., title="Game Id")
    play_pile: List[CardModel] = Field(..., title="Play Pile")
    game_state: str = Field(..., title="Game State")
    nbr_of_cards_in_deck: int = Field(..., title="Nbr Of Cards In Deck")
    currents_turn: int = Field(..., title="Currents Turn")
    player_public_info: List[PlayerPublicInfo] = Field(..., title="Player Public Info")


class PublicInfo(BaseModel):
    type: Optional[str] = Field(default="public_info", title="Type")
    data: PublicInfoData


class PlayerPrivateInfo(BaseModel):
    id: int = Field(..., title="Id")
    private_cards: List[CardModel] = Field(..., title="Private Cards")


class PrivateInfo(BaseModel):
    type: Optional[str] = Field(default="private_info", title="Type")
    data: PlayerPrivateInfo


class RulesData(BaseModel):
    high_low_rank: Optional[int] = Field(default=7, title="High Low Rank")


class Rules(BaseModel):
    type: Optional[str] = Field(default="rules", title="Type")
    data: Optional[RulesData] = Field(default={"high_low_rank": 7}, title="Data")


class ClientModel(BaseModel):
    type: Optional[str] = Field(default="client_id", title="Type")
    client_id: int = Field(..., title="Client Id")


class GameTableData(BaseModel):
    nbr_of_players: int = Field(..., title="Nbr Of Players")
    clients: List[ClientModel] = Field(..., title="Clients")


class GameTable(BaseModel):
    type: Optional[str] = Field(default="current_game_table", title="Type")
    data: GameTableData


class Log(BaseModel):
    type: Optional[str] = Field(default="log", title="Type")
    message: str = Field(..., title="Message")
