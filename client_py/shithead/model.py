# generated by datamodel-codegen:
#   filename:  request-schema.json
#   timestamp: 2023-02-20T22:11:08+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field


class Requests(BaseModel):
    __root__: Any = Field(..., title='Requests')


class TakePlayPileRequest(BaseModel):
    player_id: int = Field(..., title='Player Id')
    type: Optional[str] = Field('take_play_pile', title='Type')


class HiddenCardRequest(BaseModel):
    player_id: int = Field(..., title='Player Id')
    type: Optional[str] = Field('hidden_card', title='Type')


class CardModel(BaseModel):
    rank: int = Field(..., title='Rank')
    suit: int = Field(..., title='Suit')


class ChoosePublicCardsRequest(BaseModel):
    player_id: int = Field(..., title='Player Id')
    type: Optional[str] = Field('choose_public_cards', title='Type')
    cards: List[CardModel] = Field(..., title='Cards')


class PrivateCardsRequest(BaseModel):
    player_id: int = Field(..., title='Player Id')
    type: Optional[str] = Field('private_cards', title='Type')
    cards: List[CardModel] = Field(..., title='Cards')
    choice: str = Field(..., title='Choice')


class PlayerPublicInfo(BaseModel):
    id: int = Field(..., title='Id')
    public_cards: List[CardModel] = Field(..., title='Public Cards')
    nbr_hidden_cards: int = Field(..., title='Nbr Hidden Cards')
    nbr_private_cards: int = Field(..., title='Nbr Private Cards')


class PublicInfoData(BaseModel):
    game_id: int = Field(..., title='Game Id')
    play_pile: List[CardModel] = Field(..., title='Play Pile')
    game_state: str = Field(..., title='Game State')
    nbr_of_cards_in_deck: int = Field(..., title='Nbr Of Cards In Deck')
    currents_turn: int = Field(..., title='Currents Turn')
    player_public_info: List[PlayerPublicInfo] = Field(..., title='Player Public Info')
    type: Optional[str] = Field('public_info', title='Type')


class PublicInfo(BaseModel):
    type: Optional[str] = Field('public_info', title='Type')
    data: PublicInfoData


class PlayerPrivateInfo(BaseModel):
    id: int = Field(..., title='Id')
    private_cards: List[CardModel] = Field(..., title='Private Cards')


class PrivateInfo(BaseModel):
    type: Optional[str] = Field('private_info', title='Type')
    data: PlayerPrivateInfo


class ChoiceModel(BaseModel):
    higher: Optional[str] = Field('HIGHER', title='Higher')
    lower: Optional[str] = Field('LOWER', title='Lower')


class RulesData(BaseModel):
    high_low_rank: Optional[int] = Field(7, title='High Low Rank')
    choice: Optional[ChoiceModel] = Field(
        default_factory=lambda: ChoiceModel.parse_obj({'higher': 'HIGHER', 'lower': 'LOWER'}),
        title='Choice',
    )


class Rules(BaseModel):
    type: Optional[str] = Field('rules', title='Type')
    data: Optional[RulesData] = Field(
        default_factory=lambda: RulesData.parse_obj(
            {'high_low_rank': 7, 'choice': {'higher': 'HIGHER', 'lower': 'LOWER'}}
        ),
        title='Data',
    )
